def insertion_sort(arr):
    for i in range(1, len(arr)):
        j = i
        while arr[j - 1] > arr[j] and j > 0:
            arr[j - 1], arr[j] = arr[j], arr[j - 1]
            j -= 1
    return arr
    
    
def selection_sort(arr):
    for i in range(0, len(arr) - 1):
        cur_min_idx = i
        for j in range(i + 1, len(arr)):
            if arr[j] < arr[cur_min_idx]:
                cur_min_idx = j
        arr[i], arr[cur_min_idx] = arr[cur_min_idx], arr[i]

    return arr    
    
    
 def bubble_sort(arr):
    swapped = True
    while swapped:
        swapped = False
        for i in range(len(arr) - 1):
            if arr[i] > arr[i + 1]:
                arr[i], arr[i+1] = arr[i+1], arr[i]
                swapped = True

    return arr   
    
    
    def shell_sort(array):
    gap = len(array) // 2
    while gap > 0 :
        for i in range(gap, len(array)):
            while array[i - gap] > array[i] and i > 0:
                array[i - gap], array[i] = array[i], array[i - gap]
                i -= gap

        gap //= 2
        
        
        
        
        def counting_sort(arr):
    output_list = [0] * len(arr)
    counting_list = [0] * (max(arr) + 1)
    for i in range(len(arr)):
        counting_list[arr[i]] += 1
    for j in range(len(counting_list) - 1):
        counting_list[j + 1] += counting_list[j]
    for k in range(len(arr) - 1, -1, -1):
        output_list[counting_list[arr[k]] - 1] = arr[k]
        counting_list[arr[k]] -= 1
    return output_list
    
    
    
    
    def merge_sort(arr):
    if len(arr) > 1:
        pointer = len(arr) // 2
        left_arr = arr[:pointer]
        right_arr = arr[pointer:]
        merge_sort(left_arr)
        merge_sort(right_arr)

        i = 0  # operates on left_arr
        j = 0  # operates on right_arr
        k = 0  # helps alocate in arr

        while i < len(left_arr) and j < len(right_arr):
            if left_arr[i] < right_arr[j]:
                arr[k] = left_arr[i]
                i += 1
                k += 1
            else:
                arr[k] = right_arr[j]
                j += 1
                k += 1
        while i < len(left_arr):
            arr[k] = left_arr[i]
            i += 1
            k += 1
        while j < len(right_arr):
            arr[k] = right_arr[j]
            j += 1
            k += 1

    return arr
