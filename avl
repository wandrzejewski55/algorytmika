from graphviz import Digraph
import random


class node():
    def __init__(self, value=None):
        self.value = value
        self.left_child = None
        self.right_child = None
        self.parent = None
        self.height = 1


class AVLTree:
    def __init__(self):
        self.root = None

    def insert(self, value):
        if self.root != None:
            self._insert(value, self.root)
        else:
            self.root = node(value)

    def _insert(self, value, cur_node):
        if value < cur_node.value:
            if cur_node.left_child != None:
                self._insert(value, cur_node.left_child)
            else:
                cur_node.left_child = node(value)
                cur_node.left_child.parent = cur_node
                self._inspect_insertion(cur_node.left_child)
        else:
            if cur_node.right_child != None:
                self._insert(value, cur_node.right_child)
            else:
                cur_node.right_child = node(value)
                cur_node.right_child.parent = cur_node
                self._inspect_insertion(cur_node.right_child)

    def inorder_traversal(self):
        if self.root != None:
            self._inorder_traversal(self.root)

    def _inorder_traversal(self, cur_node):
        if cur_node.left_child != None:
            self._inorder_traversal(cur_node.left_child)
        print(cur_node.value)
        if cur_node.right_child != None:
            self._inorder_traversal(cur_node.right_child)

    def postorder_traversal(self):
        if self.root != None:
            self._postorder_traversal(self.root)

    def _postorder_traversal(self, cur_node):
        if cur_node.left_child != None:
            self._postorder_traversal(cur_node.left_child)
        if cur_node.right_child != None:
            self._postorder_traversal(cur_node.right_child)
        print(cur_node.value)

    def preorder_traversal(self):
        if self.root != None:
            self._preorder_traversal(self.root)

    def _preorder_traversal(self, cur_node):
        print(cur_node.value)
        if cur_node.left_child != None:
            self._preorder_traversal(cur_node.left_child)
        if cur_node.right_child != None:
            self._preorder_traversal(cur_node.right_child)

    def find_min(self):
        if self.root != None:
            self._find_min(self.root)
        else:
            print("brak danych w drzewie")

    def _find_min(self, cur_node):
        if cur_node.left_child != None:
            print(cur_node.value)
            self._find_min(cur_node.left_child)
        else:
            print(cur_node.value)

    def find(self, value):
        if self.root != None:
            return self._find(value, self.root)
        else:
            return None

    def _find(self, value, cur_node):
        if value == cur_node.value:
            return cur_node
        if value < cur_node.value and cur_node.left_child != None:
            return self._find(value, cur_node.left_child)
        elif value >= cur_node.value and cur_node.right_child != None:
            return self._find(value, cur_node.right_child)
        else:
            return None

    def delete_value(self, value):
        if self.find(value) == None:
            print("Nie ma przecież takiej wartości")
        else:
            return self._delete_value(self.find(value))

    def _delete_value(self, node):

        def num_of_child(node):
            counter = 0
            if node.left_child != None: counter += 1
            if node.right_child != None: counter += 1
            return counter

        def find_min_node(node):
            current = node
            while current.left_child != None:
                current = current.left_child
            return current

        if node.parent != None:
            node_parent = node.parent
            child = num_of_child(node)

            if child == 0:
                if node_parent.left_child == node:
                    node_parent.left_child = None
                else:
                    node_parent.right_child = None
            if child == 1:
                if node.left_child != None:
                    adoption = node.left_child
                else:
                    adoption = node.right_child
                if node_parent.left_child == node:
                    node_parent.left_child = adoption
                    adoption.parent = node_parent
                else:
                    node_parent.right_child = adoption
                    adoption.parent = node_parent
            if child == 2:
                successor = find_min_node(node.right_child)
                node.value = successor.value
                self._delete_value(successor)

                return
            node_parent.height = 1 + max(self.get_height(node_parent.left_child),
                                         self.get_height(node_parent.right_child))

            self._inspect_deletion(node_parent)
        else:
            self.root = None

    def postorder_deletion(self):
        if self.root != None:
            self._postorder_deletion(self.root)
        else:
            print("nie ma nic ")

    def _postorder_deletion(self, cur_node):
        if cur_node.left_child != None:
            self._postorder_deletion(cur_node.left_child)
        if cur_node.right_child != None:
            self._postorder_deletion(cur_node.right_child)
        print(cur_node.value)
        if cur_node.parent != None:
            if cur_node.parent.left_child == cur_node:
                cur_node.parent.left_child = None
            else:
                cur_node.parent.right_child = None
        else:
            self.root = None

    def preorder_subtree_traversal(self, value):
        if self.root != None:
            if self.find(value) != None:
                self._preorder_subtree_traversal(self.find(value))

    def _preorder_subtree_traversal(self, cur_node):
        if cur_node.left_child != None:
            self._preorder_subtree_traversal(cur_node.left_child)
        if cur_node.right_child != None:
            self._preorder_subtree_traversal(cur_node.right_child)
        print(cur_node.value)

    #### new functions for AVL

    def _inspect_insertion(self, cur_node, path=[]):
        if cur_node.parent == None: return
        path = [cur_node] + path

        left_height = self.get_height(cur_node.parent.left_child)
        right_height = self.get_height(cur_node.parent.right_child)

        if abs(left_height - right_height) > 1:
            path = [cur_node.parent] + path
            self._rebalance_node(path[0], path[1], path[2])
            return

        new_height = 1 + cur_node.height
        if new_height > cur_node.parent.height:
            cur_node.parent.height = new_height
        self._inspect_insertion(cur_node.parent, path)

    def _inspect_deletion(self, cur_node):
        if cur_node == None: return

        left_height = self.get_height(cur_node.left_child)
        right_height = self.get_height(cur_node.right_child)

        if abs(left_height - right_height) > 1:
            y = self.taller_child(cur_node.left_child)
            x = self.taller_child(y)
            self._rebalance_node(cur_node, y, x)
        self._inspect_deletion(cur_node.parent)

    def _rebalance_node(self, z, y, x):
        if y == z.left_child and x == y.left_child:
            self._right_rotate(z)
        elif y == z.right_child and x == y.right_child:
            self._left_rotate(z)
        elif y == z.left_child and x == y.right_child:
            self._left_rotate(y)
            self._right_rotate(x)
        elif y == z.right_child and x == y.left_child:
            self._right_rotate(y)
            self._left_rotate(z)

    def _right_rotate(self, z):
        sub_root = z.parent
        y = z.left_child
        t3 = y.right_child
        y.right_child = z
        z.parent = y
        z.left_child = t3
        if t3 != None: t3.parent = z
        y.parent = sub_root
        if y.parent == None:
            self.root = y
        else:
            if y.parent.left_child == z:
                y.parent.left_child = y
            else:
                y.parent.right_child = y
        z.height = 1 + max(self.get_height(z.left_child),
                           self.get_height(z.right_child))
        y.height = 1 + max(self.get_height(y.left_child),
                           self.get_height(y.right_child))

    def _left_rotate(self, z):
        sub_root = z.parent
        y = z.right_child
        t2 = y.left_child
        y.left_child = z
        z.parent = y
        z.right_child = t2
        if t2 != None: t2.parent = z
        y.parent = sub_root
        if y.parent == None:
            self.root = y
        else:
            if y.parent.left_child == z:
                y.parent.left_child = y
            else:
                y.parent.right_child = y
        z.height = 1 + max(self.get_height(z.left_child),
                           self.get_height(z.right_child))
        y.height = 1 + max(self.get_height(y.left_child),
                           self.get_height(y.right_child))

    def get_height(self, cur_node):
        if cur_node == None: return 0
        return cur_node.height

    def taller_child(self, cur_node):
        if cur_node.left_child is not None:
            left = self.get_height(cur_node.left_child)
        else:
            left = -1
        if cur_node.right_child is not None:
            right = self.get_height(cur_node.right_child)
        else:
            right = -1

        if left >= right:
            return cur_node.left_child
        else:
            return cur_node.right_child

       
    # do rysowania

    def view(self):
        def get_tree_edges(node):
            edges = []
            if node is not None:
                if node.left_child is not None:
                    edges.append((node.value, node.left_child.value))
                    edges.extend(get_tree_edges(node.left_child))
                if node.right_child is not None:
                    edges.append((node.value, node.right_child.value))
                    edges.extend(get_tree_edges(node.right_child))
            return edges

        tree_edges = get_tree_edges(self.root)
        dot = Digraph()
        for edge in tree_edges:
            dot.edge(str(edge[0]), str(edge[1]))
        return dot


tree = AVLTree()
for i in range(10):
    tree.insert(random.randint(1, 50))

tree.insert(14)

tree.delete_value(14)

print(tree.view())
