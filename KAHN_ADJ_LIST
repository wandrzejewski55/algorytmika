#### TEN PIERWSZY KOD Z INDEKSOWANIEM OD 0

class Graph:
    def __init__(self, v, e):
        self.v = v
        self.e = e
        self.successors = {}
        for a in range(v):
            self.successors[str(a)] = []


    def add_edge(self, v1, v2):
        self.successors[str(v1)] += [v2]

    def printSuccList(self):
        for el in self.successors:
            print(el, self.successors[el])


    def Kahn_Topological_Ordering(self):
        in_degree = [0] * self.v
        queue = []
        for key, values in self.successors.items():
            for value in values:
                in_degree[value] += 1

        for i in range(len(in_degree)):
            if in_degree[i] == 0:
                queue.append(i)

        index = 0
        order = [0] * self.v
        while len(queue) != 0:
            at = queue[0]
            queue.pop(0)
            order[index] = at
            index +=1
            for value in self.successors[str(at)]:
                in_degree[value] -= 1
                if in_degree[value] == 0:
                    queue.append(value)
        if index != self.v:
            return("GRAF ZAWIERA CYKL, TO SORTOWANIE NIE JEST MOŻLIWE")
        return(order)








G = Graph(13, 17)

G.add_edge(0, 2)
G.add_edge(0, 3)
G.add_edge(0, 6)
G.add_edge(2, 6)
G.add_edge(1, 4)
G.add_edge(3, 1)
G.add_edge(3, 4)
G.add_edge(4, 5)
G.add_edge(4, 8)
G.add_edge(6, 7)
G.add_edge(6, 11)
G.add_edge(7, 4)
G.add_edge(7, 12)
G.add_edge(9, 2)
G.add_edge(9, 10)
G.add_edge(10, 6)
G.add_edge(11, 12)
G.add_edge(12, 8)
# G.add_edge(11, 9) ### to jak się doda to tworzy cykl w grafie skierowanym




print(G.Kahn_Topological_Ordering())










#### TU Z INDEKSOWANIEM OD 1
class Graph:
    def __init__(self, v, e):
        self.v = v
        self.e = e
        self.successors = {}
        for a in range(v):
            key = a + 1
            self.successors[str(key)] = []


    def add_edge(self, v1, v2):
        self.successors[str(v1)] += [v2]

    def printSuccList(self):
        for el in self.successors:
            print(el, self.successors[el])

    def Kahn_Topological_Ordering(self):
        in_degree = [0] * (self.v + 1)
        queue = []
        for key, values in self.successors.items():
            for value in values:
                in_degree[value] += 1

        for i in range(1, self.v + 1):
            if in_degree[i] == 0:
                queue.append(i)

        index = 0
        order = [0] * self.v
        while len(queue) != 0:
            at = queue[0]
            queue.pop(0)
            order[index] = at
            index += 1
            for value in self.successors[str(at)]:
                in_degree[value] -= 1
                if in_degree[value] == 0:
                    queue.append(value)
        if index != self.v:
            return ("GRAF ZAWIERA CYKL, TO SORTOWANIE NIE JEST MOŻLIWE")
        return (order)



G = Graph(13, 17)

G.add_edge(1, 3)
G.add_edge(1, 4)
G.add_edge(1, 7)
G.add_edge(3, 7)
G.add_edge(2, 5)
G.add_edge(4, 2)
G.add_edge(4, 5)
G.add_edge(5, 6)
G.add_edge(5, 9)
G.add_edge(7, 8)
G.add_edge(7, 12)
G.add_edge(8, 5)
G.add_edge(8, 13)
G.add_edge(10, 3)
G.add_edge(10, 11)
G.add_edge(11, 7)
G.add_edge(12, 13)
G.add_edge(13, 9)
# G.add_edge(12, 10) ### to jak się doda to tworzy cykl w grafie skierowanym




print(G.Kahn_Topological_Ordering())
