class Graph:
    def __init__(self, v, e):
        self.v = v
        self.e = e
        self.matrix = [[0 for j in range(v + 3)] for i in range(v)]
        self.successors = {}
        self.predecessors = {}
        self.noIncident = {}
        for a in range(v):
            self.successors[str(a)] = []
            self.predecessors[str(a)] = []
            self.noIncident[str(a)] = []

    def addSucc(self, v1, v2):
        self.successors[str(v1)] += [v2]

    def addPred(self, v1, v2):
        self.predecessors[str(v2)] += [v1]

    def addNoIn(self, v1, v2):
        self.noIncident[str(v1)] += [v2]

    def makeGraphMatrix(self):
        for i in range(self.v):
            self.matrix[i][self.v] = self.successors[str(i)][0]
            for succ in self.successors[str(i)]:
                self.matrix[i][succ] = self.successors[str(i)][-1]
            self.matrix[i][self.v + 1] = self.predecessors[str(i)][0]
            for pred in self.predecessors[str(i)]:
                self.matrix[i][pred] = self.predecessors[str(i)][-1] + self.v
            self.matrix[i][self.v + 2] = self.noIncident[str(i)][0]
            for incd in self.noIncident[str(i)]:
                self.matrix[i][incd] = -self.noIncident[str(i)][-1]

    def print_matrix(self):
        for i in range(self.v):
            print(self.matrix[i])




    def isSafe(self, v, pos, path):
        if self.matrix[path[pos-1]][v] != self.successors[(str(path[pos-1]))][-1]:
            return False

        for vertex in path:
            if vertex == v:
                return False
        return True


    def hamCycleUtil(self,path,pos):
        if pos == self.v:
            if self.matrix[path[pos-1]][path[0]] == self.successors[str(path[pos-1])][-1]:
                return True
            else:
                return False

        for v in range(1, self.v):
            if self.isSafe(v, pos, path) == True:
                path[pos] = v
                if self.hamCycleUtil(path,pos+1) == True:
                    return True
                path[pos] = -1
        return False
    def hamCycle(self):
        path = [-1] * self.v
        path[0] = 0

        if self.hamCycleUtil(path, 1) == False:
            print("Graf wej≈õciowy nie zawiera cyklu Hamiltona")
            return False
        print(path)







g = Graph(5, 8)
# vertices = [(0, 1), (1, 3), (1, 4), (2, 0), (2, 1), (3, 2), (4, 0), (4, 3)]
vertices = [(0, 1), (1, 3), (1, 4), (2, 1), (3, 2), (4, 3)]
for v in vertices:
    g.addSucc(v[0], v[1])
    g.addPred(v[0], v[1])

for i in range(g.v):
    for j in range(g.v):
        if j not in g.successors[str(i)] and j not in g.predecessors[str(i)]:
            g.addNoIn(i, j)

g.makeGraphMatrix()
g.print_matrix()


g.hamCycle()
