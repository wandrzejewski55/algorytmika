class Graph:
    def __init__(self, v, e):
        self.v = v
        self.e = e
        self.matrix = [[0 for j in range(v)] for i in range(v)]

    def makeAdjacencyMatrix(self, v1, v2):
        self.matrix[v1][v2] = 1
        self.matrix[v2][v1] = 1

    def print_matrix(self):
        for i in range(self.v):
            print(self.matrix[i])

    # do sprawdzania, czy vertex jest już na path,
    # oraz czy jest sąsiadem ostatnio dodanego vertexa
    def is_safe(self, v, pos, path):

        if self.matrix[path[pos - 1]][v] == 0:
            return False

        for vertex in path:
            if vertex == v:
                return False
        return True

    # rekurencyjna głowna funkcja do sprawdzania hamiltona

    def hamCycleUtil(self, path, pos):

    # wszystkie wierzchołki na path - sprawdzanie czy ostatni jest sąsiadem pierwszego
        if pos == self.v:
            if self.matrix[path[0]][path[pos - 1]] == 1:
                return True
            else:
                return False

        # sprawdzamy potencjalnych sąsiadów (nie wliczając 0 bo to staring point)
        for v in range(self.v):
            if self.is_safe(v, pos, path) == True:
                path[pos] = v

                if self.hamCycleUtil(path, pos + 1) == True:
                    return True
                # usuwamy wierzchołek jeśli nie prowadzi do rozwiązania
                path[pos] = -1
        return False

    def hamCycle(self):
        # tworzymy path i dodajemy 0 jako pierwszy wiercholek,(jeśli cykl to nie ma znaczenia jaki wiec domyslnie 0)

        path = [-1] * self.v
        path[0] = 0
        if self.hamCycleUtil(path, 1) == False:
            print("Graf wejściowy nie zawiera cyklu Hamiltona")
            return False

        print(path)
        return True



g1 = Graph(5, 5)
g1.makeAdjacencyMatrix(0,1)
g1.makeAdjacencyMatrix(0,3)
g1.makeAdjacencyMatrix(1,3)
g1.makeAdjacencyMatrix(1,4)
g1.makeAdjacencyMatrix(1,2)

#te krawędzie dają cykl
g1.makeAdjacencyMatrix(2,4)
g1.makeAdjacencyMatrix(4,3)

g1.hamCycle()
