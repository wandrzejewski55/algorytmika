class node:
    def __init__(self, value):
        self.left_child = None
        self.right_child = None
        self.value = value
        self.parent = None  ## bo przy usuwaniu jest łatwiej


class binary_search_tree:
    def __init__(self):
        self.root = None

    def insertion(self, value):
        if self.root != None:
            self._insertion(value, self.root)
        else:
            self.root = node(value)

    def _insertion(self, value, cur_node):
        if value < cur_node.value:
            if cur_node.left_child != None:
                self._insertion(value, cur_node.left_child)
            else:
                cur_node.left_child = node(value)
                cur_node.left_child.parent = cur_node
        else:
            if cur_node.right_child != None:
                self._insertion(value, cur_node.right_child)
            else:
                cur_node.right_child = node(value)
                cur_node.right_child.parent = cur_node

    def inorder_traversal(self):
        if self.root != None:
            self._inorder_traversal(self.root)

    def _inorder_traversal(self, cur_node):
        if cur_node.left_child != None:
            self._inorder_traversal(cur_node.left_child)
        print(cur_node.value)
        if cur_node.right_child != None:
            self._inorder_traversal(cur_node.right_child)

    def postorder_traversal(self):
        if self.root != None:
            self._postorder_traversal(self.root)

    def _postorder_traversal(self, cur_node):
        if cur_node.left_child != None:
            self._postorder_traversal(cur_node.left_child)
        if cur_node.right_child != None:
            self._postorder_traversal(cur_node.right_child)
        print(cur_node.value)

    def preorder_traversal(self):
        if self.root != None:
            self._preorder_traversal(self.root)

    def _preorder_traversal(self, cur_node):
        print(cur_node.value)
        if cur_node.left_child != None:
            self._inorder_traversal(cur_node.left_child)
        if cur_node.right_child != None:
            self._inorder_traversal(cur_node.right_child)

    def find_min(self):
        if self.root != None:
            current = self.root
            print(current.value)
            while current.left_child != None:
                current = current.left_child
                print(current.value)

    def find_max(self):
        if self.root != None:
            current = self.root
            print(current.value)
            while current.right_child != None:
                current = current.right_child
                print(current.value)

    def find(self, value):      #funkcja która używana jest przy usuwaniu
        if self.root != None:
            return self._find(value, self.root)

    def _find(self, value, cur_node):
        if value == cur_node.value:
            return cur_node
        if value < cur_node.value:
            if cur_node.left_child != None:
                return self._find(value, cur_node.left_child)
        if value >= cur_node.value:
            if cur_node.right_child != None:
                return self._find(value, cur_node.right_child)

    def delete_value(self, value):
        if self.root != None:
            self._delete_value(self.find(value))

    def _delete_value(self, node):

        def num_of_childreen(node):
            outcome = 0
            if node.left_child != None: outcome += 1
            if node.right_child != None: outcome += 1
            return outcome

        def find_min_from(node):  #to po to żeby znaleźć succesora (node który wskoczy na miejsce usuniętego)
            current = node
            while current.left_child != None:
                current = current.left_child
            return current

        if node != self.root:

            children = num_of_childreen(node)
            node_parent = node.parent

            if children == 0:
                if node_parent.left_child == node:
                    node_parent.left_child = None
                if node_parent.right_child == node:
                    node_parent.right_child = None
            if children == 1:
                if node.left_child != None:
                    kid_adoption = node.left_child
                else:
                    kid_adoption = node.right_child
                if node_parent.left_child == node:
                    node_parent.left_child = kid_adoption
                else:
                    node_parent.right_child = kid_adoption
            if children == 2:
                successor = find_min_from(node.right_child)
                node.value = successor.value
                self.delete_value(successor.value)
        else:
            self.root = None

    def postorder_deletion(self):
        if self.root != None:
            self._postorder_deletion(self.root)

    def _postorder_deletion(self, cur_node):
        if cur_node.left_child != None:
            self._postorder_deletion(cur_node.left_child)
        if cur_node.right_child != None:
            self._postorder_deletion(cur_node.right_child)
        print(f"usuwana wartość..: {cur_node.value}")
        self.delete_value(cur_node.value)

    def preorder_subtree_traversal(self, value):            #to traversuje preorderowo ale od klucza który poda
        if self.root != None:
            if self.find(value) != None:
                self._preorder_subtree_traversal(self.find(value))
    def _preorder_subtree_traversal(self, cur_node):
        if cur_node.left_child != None:
            self._preorder_subtree_traversal(cur_node.left_child)
        if cur_node.right_child != None:
            self._preorder_subtree_traversal(cur_node.right_child)
        print(cur_node.value)

    def right_rotate(self, z):
        sub_root = z.parent
        y = z.left_child
        t3 = y.right_child

        y.right_child = z
        z.parent = y

        z.left_child = t3
        if t3 != None:
            t3.parent = z
        y.parent = sub_root
        if y.parent == None:
            self.root = y
        else:
            if y.parent.left_child == z:
                y.parent.left_child = y
            else:
                y.parent.right_child = y

    def left_rotate(self, z):
        sub_root = z.parent


        y = z.right_child
        if z.left_child != None:
            t2 = z.left_child
        else:
            t2 = None
        if y.left_child != None:
            y.left_child = z
        else:
            z = y.left_child
        z.parent = y

        z.right_child = t2
        if t2 != None:
            t2.parent = z
        y.parent = sub_root
        if y.parent == None:
            self.root = y
        else:
            if y.parent.right_child == z:
                y.parent.right_child = y
            else:
                y.parent.left_child = y

    def left_rotate_for_DSW(self, z):
        x = z.right_child
        if z.parent != None:
            sub_root = z.parent
            sub_root.right_child = x
            x.parent = sub_root

            x.left_child = z
            z.parent = x
        else:
            x = self.root
            x.left_child = z
            z.parent = x







    def left_rotate_for_root(self):
        if self.root.right_child != None:
            x = self.root.right_child
            y = self.root
            self.root = x
            x.left_child = y
            y.parent = x

    def _DSW_back(self, cur_node):
        self.left_rotate_for_root()
        # if cur_node.right_child != None:
        #     if cur_node.right_child.right_child != None:
        #         self.left_rotate_for_DSW(cur_node.right_child)

    def DSW(self):
        if self.root != None:
            self._DSW(self.root)

    def _DSW(self, cur_node):
        if cur_node.left_child != None:
            self.right_rotate(cur_node)
            self._DSW(cur_node)
        if cur_node.right_child != None:
            self._DSW(cur_node.right_child)   #do tego momentu ustawia drzewo w prawą winorośl
        # self._DSW_back(self.root)           # tu jak wywołując się pitoli


tree = binary_search_tree()
seq = [1, 3, 2, 6, 5, 4, 7]

for num in seq:
    tree.insertion(num)
# tree.inorder_traversal()

# times = int(input("podaj ile chcesz usunąć"))
#
# for i in range(times):
#     value = int(input("Podaj wartość węzła do usunięcia"))
#     tree.delete_value(value)
#     tree.inorder_traversal()
#     print("----------------------")

tree.DSW()
tree.postorder_traversal()
# tree.inorder_traversal()






